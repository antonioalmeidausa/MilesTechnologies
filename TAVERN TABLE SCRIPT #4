DROP TABLE IF EXISTS RATS;
DROP TABLE IF EXISTS ROOM_STAY;
DROP TABLE IF EXISTS ROOM;
DROP TABLE IF EXISTS ROOM_STATUS;
DROP TABLE IF EXISTS GUEST_LEVELS;
DROP TABLE IF EXISTS GUEST_CLASSES;
DROP TABLE IF EXISTS INVENTORY;
DROP TABLE IF EXISTS SUPPLY_RECEIVED;
DROP TABLE IF EXISTS SUPPLY_SALE;
DROP TABLE IF EXISTS SERVICE_SALE;
DROP TABLE IF EXISTS SUPPLIES;
DROP TABLE IF EXISTS SERVICES;
DROP TABLE IF EXISTS SERVICES_STATUS;
DROP TABLE IF EXISTS GUESTS;
DROP TABLE IF EXISTS GUEST_STATUS;
DROP TABLE IF EXISTS TAVERN;
DROP TABLE IF EXISTS LOCATION;
DROP TABLE IF EXISTS OWNER;
DROP TABLE IF EXISTS ROLES;



CREATE TABLE ROLES 
    (
        ROLE_ID INT PRIMARY KEY IDENTITY (1, 1), 
        ROLE_DESCRIPTION VARCHAR(100) NOT NULL
    );

    INSERT INTO ROLES (ROLE_DESCRIPTION)
VALUES 
    ('OWNER'),
    ('PARTNER'),
    ('ADMINISTRATOR');

CREATE TABLE OWNER 
    (
        OWNER_ID INT PRIMARY KEY IDENTITY (1, 1), 
        FIRST_NAME VARCHAR(100) NOT NULL, 
        LAST_NAME VARCHAR(100) NOT NULL, 
        ROLE_ID INT
    );

INSERT INTO OWNER (FIRST_NAME, LAST_NAME, ROLE_ID)
VALUES 
    ('JOHN', 'DOE', 1),
    ('SUSAN', 'DOE', 2),
    ('BOB', 'SMITH', 3),
    ('TRAVIS', 'PARKER', 1),
    ('CHELSEA', 'COX', 3),
    ('STEVE', 'WONDER', 1),
    ('SCOTT', 'MCDOUGH', 2),
    ('BRADY', 'TODD', 3),
    ('TODD', 'STAR', 1),
    ('CHARLES', 'GERBER', 3);

ALTER TABLE OWNER
ADD FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID);    

CREATE TABLE LOCATION 
    (
        LOCATION_ID INT PRIMARY KEY IDENTITY (1, 1), 
        LOCATION_DESCRIPTION VARCHAR(100) NOT NULL
    );

INSERT INTO LOCATION
VALUES 
    ('LOS ANGELES, CA'),
    ('BOSTON, MA'), 
    ('HOUSTON, TX'), 
    ('MIAMI, FL'),
    ('NASHVILLE, TN');

CREATE TABLE TAVERN 
    (
        TAVERN_ID INT PRIMARY KEY IDENTITY (1, 1), 
        TAVERN_NAME VARCHAR(100) NOT NULL, 
        OWNER_ID INT, 
        TAVERN_ADDRESS INT
    );

ALTER TABLE TAVERN 
ADD FOREIGN KEY (OWNER_ID) REFERENCES OWNER(OWNER_ID);

ALTER TABLE TAVERN
ADD FOREIGN KEY (TAVERN_ADDRESS) REFERENCES LOCATION(LOCATION_ID);

INSERT INTO TAVERN (TAVERN_NAME, OWNER_ID, TAVERN_ADDRESS)
VALUES 
     ('CLUB', 10, 1),
    ('OLD BARN', 4, 2),
    ('NEW TEXAS', 3, 3),
    ('GALAXY', 2, 2),
    ('SPACE JAM', 1, 4),
    ('STAR', 1, 2),
    ('MOON', 2, 2),
    ('SUN', 3, 4),
    ('UNIVERSE', 4, 5),
    ('LIGHTNING', 5, 4);

-- DEMONSTRATE THE ERROR WHEN TRYING TO INSERT WITH FOREIGN KEY CONSTRAINT

-- INSERT INTO TAVERN (TAVERN_NAME, OWNER_ID, TAVERN_ADDRESS)
-- VALUES
--     ('SPACE X', 8, 7);  


CREATE TABLE RATS 
    (
        RATS_ID INT PRIMARY KEY IDENTITY (1,1), 
        RATS_NAME VARCHAR(100) NOT NULL, 
        TAVERN_ID INT FOREIGN KEY REFERENCES TAVERN(TAVERN_ID)
    );

-- DROPPING TABLE RATS PER REQUEST ON CLASS #2

DROP TABLE IF EXISTS RATS;

CREATE TABLE ROOM_STATUS
    (
        STATUS_ID INT PRIMARY KEY IDENTITY(1, 1),
        STATUS VARCHAR(50) NOT NULL
    );

INSERT INTO ROOM_STATUS
VALUES
    ('BOOKED'),
    ('FREE'),
    ('READY TO CLEAN');

CREATE TABLE ROOM
    (
        ROOM_ID INT PRIMARY KEY IDENTITY(1, 1),
        ROOM_NAME VARCHAR(50) NOT NULL, 
        ROOM_STATUS INT FOREIGN KEY REFERENCES ROOM_STATUS(STATUS_ID),
        TAVERN_ID INT FOREIGN KEY REFERENCES TAVERN(TAVERN_ID),
        RATE DECIMAL (10, 2)
    );

INSERT INTO ROOM 
VALUES 
    ('DELUXE', 1, 1, 130.00),
    ('SUITE', 2, 2, 100.00), 
    ('PRESIDENTIAL', 2, 2, 200.00);



CREATE TABLE SERVICES_STATUS
    (
        STATUS_ID INT PRIMARY KEY IDENTITY (1, 1), 
        STATUS_DESCRIPTION VARCHAR(50) NOT NULL
    );

    INSERT INTO SERVICES_STATUS (STATUS_DESCRIPTION)
VALUES 
    ('ACTIVE'),
    ('INACTIVE'),
    ('CLOSED'),
    ('TEMPORARILY CLOSED');


CREATE TABLE SERVICES 
    (
        SERVICE_ID INT PRIMARY KEY IDENTITY (1, 1),
        TAVERN_ID INT FOREIGN KEY REFERENCES TAVERN(TAVERN_ID),
        SERVICE_NAME VARCHAR (100) NOT NULL, 
        SERVICE_STATUS INT FOREIGN KEY REFERENCES SERVICES_STATUS(STATUS_ID),
        SERVICE_PRICE DECIMAL(10, 2)  NOT NULL
    );

INSERT INTO SERVICES (TAVERN_ID, SERVICE_NAME, SERVICE_STATUS, SERVICE_PRICE)
VALUES 
    (1, 'POOL', 1, 25.00),
    (2, 'SHOOTING', 1, 50.00),
    (3, 'HUNTING', 2, 30.00),
    (4, 'DANCE', 3, 10.00),
    (5, 'DRINK', 1, 5.00);



CREATE TABLE GUEST_STATUS
    (
        GUEST_STATUS_ID INT PRIMARY KEY IDENTITY (1, 1),
        GUEST_STATUS_NAME VARCHAR(50) NOT NULL
    );

INSERT INTO GUEST_STATUS (GUEST_STATUS_NAME)
VALUES 
    ('HAPPY'),
    ('DISSAPOINTED'),
    ('ANGRY'),
    ('TIRED'),
    ('HURT');



CREATE TABLE GUEST_CLASSES
    (
        CLASS_ID INT PRIMARY KEY IDENTITY (1, 1),
        CLASS_NAME VARCHAR (50) NOT NULL
    );

INSERT INTO GUEST_CLASSES (CLASS_NAME)
VALUES 
    ('MAGE'),
    ('FIGHTER'),
    ('SHOOTER'),
    ('MEDIC'),
    ('LEADER');



CREATE TABLE GUESTS 
    (
        GUEST_ID INT PRIMARY KEY IDENTITY (1, 1),
        GUEST_FIRST_NAME VARCHAR(100) NOT NULL,
        GUEST_LAST_NAME VARCHAR(100) NOT NULL,
        GUEST_NOTES VARCHAR(100), 
        BIRTHDAY DATE NOT NULL,
        CAKEDAYS DATE NOT NULL, 
        STATUS INT FOREIGN KEY REFERENCES GUEST_STATUS(GUEST_STATUS_ID)        
    );

INSERT INTO GUESTS (GUEST_FIRST_NAME, GUEST_LAST_NAME, GUEST_NOTES, BIRTHDAY, CAKEDAYS, STATUS)
VALUES 
    ('BRADY', 'SMITH', 'MALE', '1986-09-11', '1986-09-11', 1),
    ('MATT', 'SCOTT', 'MALE', '2000-09-12', '2000-09-12', 4),
    ('CHANDLER', 'BING', 'MALE', '1980-11-25', '1980-11-25', 3),
    ('BRADY', 'SMITH', 'MALE', '1981-10-10', '1981-10-10', 5),
    ('CELINE', 'DION', 'FEMALE', '2002-11-28', '2002-11-28', 1),
    ('MATT', 'SCOTT', 'MALE', '1988-11-21', '1988-11-21', 1),
    ('BRETT', 'MONROE', 'FEMALE', '1960-01-25', '1960-01-25', 3),
    ('MONICA', 'GELLER', 'FEMALE', '1985-09-11', '1985-09-11', 3),
    ('RACHEL', 'GREEN', 'FEMALE', '1990-07-25', '1990-07-25', 4),
    ('BRAD', 'PITT', 'MALE', '1955-01-20', '1955-01-20', 1),
    ('MICHAEL', 'JORDAN', 'MALE', '2001-04-19', '2001-04-19', 5),
    ('BRUCE', 'WILLIS', 'MALE', '1977-10-08', '1977-10-08', 2);


CREATE TABLE GUEST_LEVELS
    (
        LEVEL_ID INT PRIMARY KEY IDENTITY (1, 1),
        GUEST_ID INT FOREIGN KEY REFERENCES GUESTS(GUEST_ID),
        LEVEL INT NOT NULL,
        CLASS INT FOREIGN KEY REFERENCES GUEST_CLASSES(CLASS_ID)
    );

INSERT INTO GUEST_LEVELS (LEVEL, GUEST_ID, CLASS)
VALUES 
    (3, 1, 5),
    (5, 2, 3),
    (2, 3, 2),
    (17, 4, 1),
    (14, 5, 4),
    (8, 6, 5),
    (7, 7, 4),
    (6, 8, 5),
    (4, 9, 3),
    (5, 10, 2),
    (12, 1, 1),
    (8, 2, 2),
    (9, 3, 4),
    (14, 4, 5),
    (19, 5, 2),
    (1, 5, 1),
    (2, 7, 2),
    (3, 8, 3),
    (4, 8, 4),
    (5, 10, 5);


CREATE TABLE SUPPLIES
    (
        SUPPLY_ID INT PRIMARY KEY IDENTITY (1, 1),
        SUPPLY_NAME VARCHAR(100) NOT NULL, 
        SUPPLY_UNIT VARCHAR(50) NOT NULL 
    );


INSERT INTO SUPPLIES (SUPPLY_NAME, SUPPLY_UNIT)
VALUES 
    ('VODKA', 'OUNCES'),
    ('BOURBON', 'LITERS'),
    ('GIN', 'OUNCES'),
    ('WATER', 'BOTTLE'),
    ('SPARKLING WATER', 'BOTTLE');



CREATE TABLE INVENTORY
    (
        INVENTORY_ID INT PRIMARY KEY IDENTITY (1, 1), 
        SUPPLY_ID INT FOREIGN KEY REFERENCES SUPPLIES(SUPPLY_ID),
        TAVERN_ID INT FOREIGN KEY REFERENCES TAVERN(TAVERN_ID),
        DATE_UPDATED DATETIME NOT NULL DEFAULT GETDATE(), 
        CURRENT_COUNT DECIMAL (10, 2) NOT NULL 
    );

INSERT INTO INVENTORY (SUPPLY_ID, TAVERN_ID, DATE_UPDATED, CURRENT_COUNT)
VALUES 
    (1, 3, GETDATE(), 200),
    (2, 4, GETDATE(), 30),
    (3, 2, GETDATE(), 150),
    (4, 1, GETDATE(), 30),
    (5, 5, GETDATE(), 25);


CREATE TABLE SUPPLY_RECEIVED
    (
        TAVERN_ID INT FOREIGN KEY REFERENCES TAVERN(TAVERN_ID),
        SUPPLY_ID INT FOREIGN KEY REFERENCES SUPPLIES(SUPPLY_ID),
        COST DECIMAL (10, 2) NOT NULL, 
        COUNT DECIMAL (10, 2) NOT NULL, 
        DATE_RECEIVED DATETIME NOT NULL DEFAULT GETDATE()
    );


INSERT INTO SUPPLY_RECEIVED (TAVERN_ID, SUPPLY_ID, COST, COUNT, DATE_RECEIVED)
VALUES 
    (1, 1, 5.00, 25, '2021-09-18'),
    (2, 3, 6.00, 30, GETDATE()),
    (3, 3, 4.00, 40, '2021-09-09'),
    (4, 4, 3.00, 20, GETDATE()),
    (5, 2, 4.00, 10, '2021-08-31');



CREATE TABLE SUPPLY_SALE
    (
        SUPPLY_SALE_ID INT PRIMARY KEY IDENTITY (1, 1), 
        GUEST_ID INT FOREIGN KEY REFERENCES GUESTS(GUEST_ID),
        TAVERN_ID INT FOREIGN KEY REFERENCES TAVERN(TAVERN_ID),
        SUPPLY_ID INT FOREIGN KEY REFERENCES SUPPLIES(SUPPLY_ID), 
        PRICE DECIMAL (10, 2) NOT NULL, 
        SALE_DATE DATETIME NOT NULL DEFAULT GETDATE(), 
        QUANTITY DECIMAL (10, 2) NOT NULL
    );
    
INSERT SUPPLY_SALE (GUEST_ID, TAVERN_ID, SUPPLY_ID, PRICE, SALE_DATE, QUANTITY)
VALUES 
    (1, 2, 1, 19.00, '2021-09-20', 1.00),
    (2, 2, 2, 14.00, GETDATE(), 1.00),
    (3, 1, 2, 22.00, GETDATE(), 1.00),
    (3, 4, 4, 17.00, GETDATE(), 1.00),
    (5, 3, 2, 13.00, GETDATE(), 1.00),
    (1, 2, 4, 12.00, '2021-09-22', 1.00),
    (4, 4, 4, 25.00, '2021-08-30', 1.00),
    (5, 5, 3, 16.00, GETDATE(), 1.00),
    (4, 5, 5, 17.00, '2021-09-19', 1.00),
    (5, 2, 1, 8.00, '2021-08-28', 1.00),
    (1, 1, 3, 10.00, '2021-09-23', 1.00),
    (2, 3, 4, 11.00, '2021-09-16', 1.00),
    (2, 4, 3, 9.00, '2021-08-21', 1.00),
    (4, 5, 5, 7.00, '2021-08-26', 1.00),
    (5, 2, 1, 8.00, '2021-09-24', 1.00);
    



CREATE TABLE SERVICE_SALE
    (
        SERVICE_SALE_ID INT PRIMARY KEY IDENTITY (1, 1), 
        GUEST_ID INT FOREIGN KEY REFERENCES GUESTS(GUEST_ID),
        TAVERN_ID INT FOREIGN KEY REFERENCES TAVERN(TAVERN_ID),
        SERVICE_ID INT FOREIGN KEY REFERENCES SERVICES(SERVICE_ID), 
        SALE_DATE DATETIME NOT NULL DEFAULT GETDATE(), 
        QUANTITY DECIMAL (10, 2) NOT NULL
    );

INSERT SERVICE_SALE (GUEST_ID, TAVERN_ID, SERVICE_ID, SALE_DATE, QUANTITY)
VALUES 
    (1, 1, 1, GETDATE(), 1.00),
    (3, 3, 2, GETDATE(), 2.00),
    (2, 5, 3, GETDATE(), 1.00),
    (3, 4, 4, GETDATE(), 1.00),
    (4, 2, 2, GETDATE(), 2.00), 
    (4, 1, 3, GETDATE(), 1.00),
    (4, 3, 3, GETDATE(), 2.00),
    (3, 5, 4, GETDATE(), 1.00),
    (4, 4, 3, GETDATE(), 1.00),
    (1, 2, 1, GETDATE(), 2.00), 
    (3, 1, 2, GETDATE(), 1.00),
    (2, 3, 3, GETDATE(), 2.00),
    (1, 5, 4, GETDATE(), 1.00),
    (4, 4, 3, GETDATE(), 1.00),
    (4, 2, 1, GETDATE(), 2.00); 

CREATE TABLE ROOM_STAY
    (
        STAY_ID INT PRIMARY KEY IDENTITY(1, 1),
        GUEST INT FOREIGN KEY REFERENCES GUESTS(GUEST_ID),
        ROOM INT FOREIGN KEY REFERENCES ROOM(ROOM_ID),
        CHECKIN DATE NOT NULL, 
        SALE INT FOREIGN KEY REFERENCES SUPPLY_SALE(SUPPLY_SALE_ID)

    );

INSERT INTO ROOM_STAY
VALUES 
    (1, 2, '2021-09-23', 3),
    (2, 1, '2021-09-19', 2),
    (2, 1, '2021-09-16', 1),
    (3, 3, '2021-09-15', 1),
    (1, 2, '2021-09-28', 1),
    (2, 1, '2021-09-20', 2),
    (2, 1, '2021-09-18', 3),
    (3, 3, '2021-09-09', 4);


--SELECT STATEMENT FOR GUEST BORN BEFORE 2000
SELECT * FROM GUESTS 
WHERE BIRTHDAY < '2000-01-01';

--SELECT STATEMENT FOR ROOM WITH RATE HIGHER THAN 100
SELECT ROOM_NAME, ROOM_STATUS.STATUS, TAVERN.TAVERN_NAME, RATE 
FROM ROOM
JOIN ROOM_STATUS ON ROOM.ROOM_STATUS = ROOM_STATUS.STATUS_ID
JOIN TAVERN ON ROOM.TAVERN_ID = TAVERN.TAVERN_ID
WHERE RATE > 100.00;

--SELECT QUERY FOR GUEST WITH UNIQUE NAME
SELECT DISTINCT GUEST_FIRST_NAME, GUEST_LAST_NAME
FROM GUESTS;

--SELECT QUERY FOR GUEST ORDERED BY NAME ASC
SELECT * FROM GUESTS 
ORDER BY GUEST_FIRST_NAME ASC;

--SELECT QUERY FOR SUPPLY/SERVICE SALE HIGHIEST PRICE
SELECT TOP 10 [SUPPLY_SALE].SUPPLY_SALE_ID, GUESTS.GUEST_FIRST_NAME, GUESTS.GUEST_LAST_NAME, TAVERN.TAVERN_NAME, SUPPLY_SALE.PRICE
FROM SUPPLY_SALE
JOIN GUESTS ON GUESTS.GUEST_ID = SUPPLY_SALE.GUEST_ID
JOIN TAVERN ON TAVERN.TAVERN_ID = SUPPLY_SALE.TAVERN_ID
ORDER BY PRICE DESC;

SELECT TOP 10 SERVICES.SERVICE_NAME, GUESTS.GUEST_FIRST_NAME, GUEST_LAST_NAME, TAVERN.TAVERN_NAME, SERVICES.SERVICE_NAME, SERVICES.SERVICE_PRICE
FROM SERVICE_SALE
JOIN SERVICES ON SERVICES.SERVICE_ID = SERVICE_SALE.SERVICE_ID
JOIN GUESTS ON GUESTS.GUEST_ID = SERVICE_SALE.GUEST_ID
JOIN TAVERN ON TAVERN.TAVERN_ID = SERVICE_SALE.TAVERN_ID
ORDER BY SERVICE_PRICE DESC;



--SELECT QUERY FOR LOOKUP TABLE 
SELECT 'SERVICE STATUS' AS TYPE, STATUS_ID, STATUS_DESCRIPTION FROM SERVICES_STATUS
UNION ALL 
SELECT 'ROLE' AS ROLE, ROLE_ID, ROLE_DESCRIPTION FROM ROLES
UNION ALL
SELECT 'LOCATION' AS LOCATION, LOCATION_ID, LOCATION_DESCRIPTION FROM LOCATION
UNION ALL 
SELECT 'CLASS' AS CLASS, CLASS_ID, CLASS_NAME FROM GUEST_CLASSES
UNION ALL
SELECT 'ROOM STATUS' AS STATUS, ROOM_STATUS.STATUS_ID, STATUS FROM ROOM_STATUS
UNION ALL 
SELECT 'GUEST STATUS' AS STATUS, GUEST_STATUS_ID, GUEST_STATUS_NAME FROM GUEST_STATUS;



--SELECT QUERY TO RETURN GUEST CLASSES ADDING A NEW COLUMN BY LEVEL RANGE
SELECT GUEST_LEVELS.LEVEL, GUEST_CLASSES.CLASS_NAME,
CASE 
    WHEN LEVEL BETWEEN 1 AND 10 THEN '1-10'
    WHEN LEVEL BETWEEN 11 AND 20 THEN '11-20'
END AS LEVEL_RANGE
FROM GUEST_LEVELS
INNER JOIN GUEST_CLASSES ON GUEST_LEVELS.CLASS = GUEST_CLASSES.CLASS_ID
ORDER BY LEVEL_RANGE ASC;


--SELECT QUERY FOR OWNER THAT HAS ADMIN ROLE
SELECT [OWNER].FIRST_NAME, [OWNER].LAST_NAME, ROLES.ROLE_DESCRIPTION
FROM [OWNER]
JOIN ROLES ON ROLES.ROLE_ID = [OWNER].ROLE_ID AND ROLES.ROLE_DESCRIPTION = 'ADMINISTRATOR';


--SELECT QUERY FOR TAVERN INFORMATION WITH OWNER AS ADMINISTRATOR
SELECT TAVERN.TAVERN_NAME, LOCATION_DESCRIPTION AS LOCATION
, [OWNER].FIRST_NAME AS OWNER_FIRSTNAME, [OWNER].LAST_NAME AS OWNER_LASTNAME
, ROLES.ROLE_DESCRIPTION
FROM [TAVERN]
JOIN LOCATION ON [LOCATION].LOCATION_ID = TAVERN.TAVERN_ADDRESS
JOIN [OWNER] ON [OWNER].OWNER_ID = TAVERN.OWNER_ID
JOIN ROLES ON ROLES.ROLE_ID = [OWNER].ROLE_ID AND ROLES.ROLE_DESCRIPTION = 'ADMINISTRATOR'



--SELECT QUERY TO RETURN TOP 10 SALES ORDERED BY PRICE WITH SERVICE NAME
SELECT TOP 10 SERVICES.SERVICE_NAME, GUESTS.GUEST_FIRST_NAME, GUEST_LAST_NAME, TAVERN.TAVERN_NAME, SERVICES.SERVICE_NAME, SERVICES.SERVICE_PRICE
FROM SERVICE_SALE
JOIN SERVICES ON SERVICES.SERVICE_ID = SERVICE_SALE.SERVICE_ID
JOIN GUESTS ON GUESTS.GUEST_ID = SERVICE_SALE.GUEST_ID
JOIN TAVERN ON TAVERN.TAVERN_ID = SERVICE_SALE.TAVERN_ID
ORDER BY SERVICE_PRICE DESC;



--SELECT QUERY TO RETURN GUEST WITH 2 OR MORE CLASSES
SELECT GUESTS.GUEST_FIRST_NAME, GUESTS.GUEST_LAST_NAME, GUEST_STATUS.GUEST_STATUS_NAME
, GUEST_LEVELS.LEVEL, GUEST_CLASSES.CLASS_NAME
FROM GUESTS
JOIN GUEST_STATUS ON GUEST_STATUS_ID = GUESTS.STATUS
JOIN GUEST_LEVELS ON GUEST_LEVELS.LEVEL_ID = GUESTS.GUEST_ID
JOIN GUEST_CLASSES ON GUEST_CLASSES.CLASS_ID = GUEST_LEVELS.CLASS
ORDER BY GUESTS.GUEST_FIRST_NAME

SELECT G.GUEST_FIRST_NAME AS 'GUEST NAME'
FROM GUESTS G
JOIN (SELECT COUNT(*) AS ENTRIES, L.GUEST_ID
FROM GUEST_LEVELS L
GROUP BY L.GUEST_ID
HAVING COUNT(*) > 1) L ON L.GUEST_ID = G.GUEST_ID



--SELECT QUERY TO RETURN GUEST WITH CLASSES AND LEVEL > 5
SELECT GUEST_CLASSES.CLASS_NAME, GUESTS.GUEST_FIRST_NAME, GUESTS.GUEST_LAST_NAME, GUEST_LEVELS.LEVEL
FROM GUEST_LEVELS
JOIN GUESTS ON GUESTS.GUEST_ID = GUEST_LEVELS.GUEST_ID
LEFT JOIN GUEST_CLASSES ON GUEST_CLASSES.CLASS_ID = GUEST_LEVELS.CLASS
WHERE GUEST_LEVELS.LEVEL > 5
ORDER BY GUEST_LEVELS.LEVEL DESC;


--SELECT QUERY TO RETURN ONLY GUEST WITH THEIR HIGHEST LEVEL
SELECT GUESTS.GUEST_FIRST_NAME AS 'FIRST NAME', MAX(LEVEL) AS 'HIGHEST LEVEL'  
FROM GUEST_LEVELS
LEFT JOIN GUESTS ON GUESTS.GUEST_ID = GUEST_LEVELS.GUEST_ID
GROUP BY GUEST_FIRST_NAME


--SELECT QUERY TO RETURN GUESTS WITH STAY DATE
SELECT GUESTS.GUEST_FIRST_NAME AS 'GUEST NAME', FORMAT (CHECKIN, 'MM-dd-yyyy') AS 'CHECK-IN DATE', ROOM.ROOM_NAME AS 'ROOM TYPE'
FROM ROOM_STAY
JOIN GUESTS ON GUESTS.GUEST_ID = ROOM_STAY.GUEST
JOIN ROOM ON ROOM.ROOM_ID = ROOM_STAY.ROOM
WHERE (CHECKIN BETWEEN '2021-09-20' AND '2021-09-28')


